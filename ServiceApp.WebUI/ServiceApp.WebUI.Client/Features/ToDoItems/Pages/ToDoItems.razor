@page "/todoitems"
@using Mapster
@inject IToDoItemService ToDoItemService
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveWebAssemblyRenderMode(false))


<h3>Oppgaver</h3>

<button class="btn btn-primary" type="button" @onclick="NyOppgaveClick">Ny oppgave</button>

@if(_toDoItemResponses == null)
{
    <p>Loading...</p>
}
else if(!_toDoItemResponses.Any())
{
    <p>Ingen oppgaver enda</p>
}
else
{
    <div class="d-flex flex-wrap">
        @foreach(var todo in _toDoItemResponses)
        {
            var currentTodo = todo;
            <div class="col-12 col-lg-6 col-lg-3 mb-3">
                <div class="card mx-2 mt-2">
                    <div class="card-header">
                        <h5 class="card-header">@currentTodo.Task.Title</h5>
                    </div>
                    <div class="card-body">
                        <p class="card-text">
                            <strong>Beskrivelse:</strong> @currentTodo.Task.Description
                        </p>
                        <p class="card-text">
                            <strong>Frist:</strong> @currentTodo.DueDate
                        </p>
                        <p class="card-text">
                            <strong>Kr:</strong> @currentTodo.Task.Amount
                        </p>
                            <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="isComplete_@currentTodo.Id" @bind="currentTodo.IsComplete" @bind:after="() => OnTaskCompleteChanged(currentTodo)"  />
                            <label class="form-check-label" for="isComplete_@todo.Id">
                                Ferdig oppgave
                            </label>
                        </div>
                        <a href="/todoitem/@todo.Id" class="btn btn-primary">Rediger oppgave</a>
                       
                    </div>
                </div>
            </div>
        }
       
    </div>
}


@code {
    private List<ToDoItemResponse>? _toDoItemResponses = new();
    

    protected override async Task OnInitializedAsync()
    {
        _toDoItemResponses = await ToDoItemService.GetAllActiveToDoItems();
    }

    private async Task OnTaskCompleteChanged(ToDoItemResponse todo)
    {
        // Call the service to update the task's completion status
        var todoItem = todo.Adapt<ToDoItemModel>();
        await ToDoItemService.UpdateToDoItem(todoItem);
        _toDoItemResponses = await ToDoItemService.GetAllActiveToDoItems();
    }

    private void NyOppgaveClick()
    {
        NavigationManager.NavigateTo("/todoitem");
    }
}

@page "/tasks/todo"
@page "/tasks/todo/{Id:int}"
@using Microsoft.AspNetCore.Components.Authorization
@inject ITaskService TaskService
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveWebAssemblyRenderMode(false))
@attribute [Authorize(Roles ="FamilyAdmin")]

<div class="container-xxl">
    <div class="col-12 col-lg-6">
        <div class="text-center">
            <h3>Oppgaver</h3>
        </div>
        @if(_taskToDoModel != null)
        {
            <EditForm Model="_taskToDoModel" OnValidSubmit="CreateTask">
                <div class="mb-3">
                    <label class="form-label">Tittel</label>
                    <InputText class="form-control" @bind-Value="_taskToDoModel.Title" />
                </div>
                 <div class="mb-3">
                     <label class="form-label">Beskrivelse</label>
                    <InputTextArea class="form-control" @bind-Value="_taskToDoModel.Description" />
                </div>
                 <div class="mb-3">
                     <label class="form-label">Kr</label>
                    <InputNumber class="form-control" @bind-Value="_taskToDoModel.Amount" />
                </div>
                <div class="d-flex justify-content-between">
                    <button class="btn btn-primary mt-3" type="submit">Lagre</button>
                    <button class="btn btn-danger mt-3" type="button" @onclick="() => DeleteTask(_taskToDoModel.Id)">Slett</button>
                </div>
            </EditForm>           
        }
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private TaskToDoChildModel _taskToDoModel = new TaskToDoChildModel();

    protected override async Task OnParametersSetAsync()
    {
        if (Id > 0)
        { 
            var result = await TaskService.GetTaskById(Id);
            if(result != null)
            {
                _taskToDoModel = new TaskToDoChildModel
                {
                   Id = result.Value.Id,
                   Title = result.Value.Title,                            
                   Description = result.Value.Description,
                    Amount = result.Value.Amount                                 
                };
            }
        }
        else      
        {
            _taskToDoModel = new TaskToDoChildModel();
        }
    }

    private async Task CreateTask()
    {
        if(Id > 0)
        {
            await TaskService.UpdateTask(_taskToDoModel);
        }
        else
        {
            await TaskService.CreateTask(_taskToDoModel);
        }      
        NavigationManager.NavigateTo("/tasks");
    }

    private async Task DeleteTask(int id)
    {
        var success = await TaskService.DeleteTask(id);
        if (success)
        {
            NavigationManager.NavigateTo("/tasks");
        }
    }
}

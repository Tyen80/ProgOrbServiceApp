@page "/InviteUser"
@using ServiceApp.Application.Emails.SendFamilyInvite
@inject ISender Sender
@inject IUserService UserService
@inject NavigationManager NavigationManager
@attribute [Authorize]


<EditForm Model="inviteUserModel" OnValidSubmit="HandleValidSubmit" FormName="InviteForm">
    <DataAnnotationsValidator />
    <ValidationSummary /> 
    <div class="mb-3">
        <label class="form-label">Email</label>
        <InputText @bind-Value="inviteUserModel.Email" class="form-control" />
    </div>
    <div class="mb-3">
        <label class="form-label">FamilyId</label>
        <InputText @bind-Value="inviteUserModel.FamilyId" class="form-control" readonly />
    </div>
    <div class="mb-3">
        <label class="form-label">Role</label>
        <InputSelect @bind-Value="inviteUserModel.Role" class="form-control">
            <option value="FamilyMember">Family Member</option>
            <option value="Kid">Kid</option>
        </InputSelect>
    </div>
    <button type="submit" class="btn btn-primary">Send Invite</button>
</EditForm>


@code {
    [SupplyParameterFromForm]
    private InviteUserModel inviteUserModel { get; set; } = new InviteUserModel();

    protected override async Task OnInitializedAsync()
    {
        var user = await UserService.GetCurrentFamilyIdAsync();
        inviteUserModel.FamilyId = user;
    }

    private async Task HandleValidSubmit()
    {
        var result = await Sender.Send(new SendFamilyInviteCommand
        { 
            Email = inviteUserModel.Email,
            FamilyId = inviteUserModel.FamilyId,
            Role = inviteUserModel.Role            
        });
    }
}
